package handlers

import (
	"database/sql"
	"encoding/json"
	"log"
	"net/http"

	"github.com/PaulSonOfLars/gotgbot/v2"
)

// InitBot - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
func InitBot(botToken string) *gotgbot.Bot {
	bot, err := gotgbot.NewBot(botToken, nil)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Bot API: %v", err)
		return nil
	}
	log.Println("Telegram Bot API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	return bot
}

// CreateBotEndpointHandler - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram Bot API
func CreateBotEndpointHandler(bot *gotgbot.Bot, appURL string, db *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ %s", r.URL.Path)
		if r.Method != http.MethodPost {
			w.WriteHeader(http.StatusNotImplemented)
			return
		}

		var update gotgbot.Update
		err := json.NewDecoder(r.Body).Decode(&update)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err)
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		if update.Message == nil {
			log.Printf("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
			http.Error(w, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", http.StatusBadRequest)
			return
		}

		userID := update.Message.From.Id
		username := update.Message.From.Username
		firstName := update.Message.From.FirstName
		lastName := update.Message.From.LastName
		languageCode := update.Message.From.LanguageCode

		_, err = db.Exec(`INSERT INTO users (id, username, first_name, last_name, language_code, created_at) VALUES ($1, $2, $3, $4, $5, NOW()) ON CONFLICT (id) DO NOTHING`, userID, username, firstName, lastName, languageCode)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: %v", err)
		} else {
			log.Printf("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", username)
		}

		message := "üíÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, " + firstName
		if lastName != "" {
			message += " " + lastName
		}
		message += "!\n\n‚ú® –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —É—Å–ª—É–≥—É –º–∞–Ω–∏–∫—é—Ä–∞ –∏–ª–∏ –ø–µ–¥–∏–∫—é—Ä–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–µ—Å—å —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –∏ —É–¥–æ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."

		opts := &gotgbot.SendMessageOpts{
			ReplyMarkup: gotgbot.InlineKeyboardMarkup{
				InlineKeyboard: [][]gotgbot.InlineKeyboardButton{{{Text: "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", WebApp: &gotgbot.WebAppInfo{Url: appURL}}}},
			},
		}

		resp, err := bot.SendMessage(update.Message.Chat.Id, message, opts)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			http.Error(w, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: "+err.Error(), http.StatusInternalServerError)
			return
		}
		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %+v", resp)
		w.WriteHeader(http.StatusOK)
	}
}
