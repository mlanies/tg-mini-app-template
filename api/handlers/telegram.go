package handlers

import (
	"database/sql"
	"encoding/json"
	"log"
	"net/http"

	"github.com/PaulSonOfLars/gotgbot/v2"
)

func InitBot(botToken string) *gotgbot.Bot {
	bot, err := gotgbot.NewBot(botToken, nil)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Bot API: %v", err)
		return nil
	}
	log.Println("Telegram Bot API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	return bot
}

func CreateBotEndpointHandler(bot *gotgbot.Bot, appURL string, db *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ %s", r.URL.Path)
		if r.Method != http.MethodPost {
			w.WriteHeader(http.StatusNotImplemented)
			return
		}

		// –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
		var update gotgbot.Update
		err := json.NewDecoder(r.Body).Decode(&update)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err)
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
		if update.Message == nil {
			log.Printf("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
			http.Error(w, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", http.StatusBadRequest)
			return
		}

		// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		userID := update.Message.From.Id
		username := update.Message.From.Username
		firstName := update.Message.From.FirstName
		lastName := update.Message.From.LastName
		languageCode := update.Message.From.LanguageCode

		// –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		_, err = db.Exec(`INSERT INTO users (id, username, first_name, last_name, language_code, created_at) VALUES ($1, $2, $3, $4, $5, NOW()) ON CONFLICT (id) DO NOTHING`,
			userID, username, firstName, lastName, languageCode)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: %v", err)
		} else {
			log.Printf("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", username)
		}

		// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		message := "üíÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, " + firstName
		if lastName != "" {
			message += " " + lastName
		}
		message += "!\n\n‚ú® –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —É—Å–ª—É–≥—É –º–∞–Ω–∏–∫—é—Ä–∞ –∏–ª–∏ –ø–µ–¥–∏–∫—é—Ä–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–µ—Å—å —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –∏ —É–¥–æ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."

		// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
		opts := &gotgbot.SendMessageOpts{
			ReplyMarkup: gotgbot.InlineKeyboardMarkup{
				InlineKeyboard: [][]gotgbot.InlineKeyboardButton{
					{
						{Text: "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", WebApp: &gotgbot.WebAppInfo{Url: appURL}},
					},
				},
			},
		}

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		resp, err := bot.SendMessage(update.Message.Chat.Id, message, opts)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			http.Error(w, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: "+err.Error(), http.StatusInternalServerError)
			return
		}

		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %+v", resp)
		w.WriteHeader(http.StatusOK)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤
func MastersHandler(db *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		log.Println("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤")

		if r.Method != http.MethodGet {
			http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
			return
		}

		// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		rows, err := db.Query("SELECT id, name, experience FROM masters")
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
			http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", http.StatusInternalServerError)
			return
		}
		defer rows.Close()

		// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
		var masters []Master
		for rows.Next() {
			var master Master
			if err := rows.Scan(&master.ID, &master.Name, &master.Experience); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏: %v", err)
				http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö", http.StatusInternalServerError)
				return
			}
			masters = append(masters, master)
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ rows.Next()
		if err = rows.Err(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫: %v", err)
			http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", http.StatusInternalServerError)
			return
		}

		// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
		w.Header().Set("Content-Type", "application/json")
		if err := json.NewEncoder(w).Encode(masters); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –≤ JSON: %v", err)
			http.Error(w, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞", http.StatusInternalServerError)
		}
	}
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞
type Master struct {
	ID         int    `json:"id"`
	Name       string `json:"name"`
	Experience int    `json:"experience"` // –ü–æ–ª–µ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞
}
